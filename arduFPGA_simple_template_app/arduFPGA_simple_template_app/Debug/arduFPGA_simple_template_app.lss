
arduFPGA_simple_template_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b69  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a73  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033f  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000098  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002219  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  cc:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <delay_ms.constprop.0>:
 So, we can use the standard interrupt vector table.
 */

static void delay_ms(uint32_t time)
{
	cli();
  d4:	f8 94       	cli
	uint32_t time_to_tick = tim_cnt + time;
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  e6:	88 51       	subi	r24, 0x18	; 24
  e8:	9c 4f       	sbci	r25, 0xFC	; 252
  ea:	af 4f       	sbci	r26, 0xFF	; 255
  ec:	bf 4f       	sbci	r27, 0xFF	; 255
	sei();
  ee:	78 94       	sei
	while(1) {
		if(tim_cnt > time_to_tick)
  f0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
  f4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
  f8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
  fc:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 100:	84 17       	cp	r24, r20
 102:	95 07       	cpc	r25, r21
 104:	a6 07       	cpc	r26, r22
 106:	b7 07       	cpc	r27, r23
 108:	98 f7       	brcc	.-26     	; 0xf0 <delay_ms.constprop.0+0x1c>
			return;
	}
}
 10a:	08 95       	ret

0000010c <main>:
int main(void)
{
    // In this example the design use a handwritten RTC as TIMER0 overflow interrupt, so we do not need to initialize the TIMER.
	// If you use arduino, even if arduino IDE initialize TIMER0, will have no effect.
	// As soon as we enable the interrupts the core will receive interrupts from TIMER0 overflow.
	DDRB = (LED_B | LED_G | LED_R); // Activate the outputs for LED pins.
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	84 b9       	out	0x04, r24	; 4
	// We can not set up PULL UP's from software for the inputs, PULL UP's on iCE40UP device are set up from the design.
	sei();
 110:	78 94       	sei
	PORTB = LED_R;
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	85 b9       	out	0x05, r24	; 5
	delay_ms(1000);
 116:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
	PORTB = LED_B;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	85 b9       	out	0x05, r24	; 5
	delay_ms(1000);
 11e:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
	PORTB = LED_G;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	85 b9       	out	0x05, r24	; 5
	delay_ms(1000);
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
	PORTB = 0;
 12a:	15 b8       	out	0x05, r1	; 5
	uint8_t old_keys = 0;
 12c:	80 e0       	ldi	r24, 0x00	; 0
					break;
				case 0b00000010: // BTN_BACK
					PORTB = LED_G;
					break;
				case 0b00000100: // BTN_DN
					PORTB = LED_B;
 12e:	d1 e0       	ldi	r29, 0x01	; 1
					break;
				case 0b00001000: // BTN_UP
					PORTB = LED_R;
 130:	14 e0       	ldi	r17, 0x04	; 4
					delay_ms(1000);
					PORTB = LED_G;
 132:	02 e0       	ldi	r16, 0x02	; 2
	uint8_t old_keys = 0;
    while (1) 
    {
		 // The advantage of the FPGA is that on the same IO PORT we can use outputs separate from the inputs.
		 // In this case for keyboard we use inputs 5:0, and for LED's we use outputs 2:0 of the same IO PORT, so, pins 2:0 has dual function.
		uint8_t tmp_keys = (~PINB) & 0b00011111; // Inverse the inputs from PORTB and filter them, the common for keyboard is logic 0.
 134:	c3 b1       	in	r28, 0x03	; 3
 136:	c0 95       	com	r28
 138:	cf 71       	andi	r28, 0x1F	; 31
		if(old_keys != tmp_keys) {
 13a:	8c 17       	cp	r24, r28
 13c:	d9 f3       	breq	.-10     	; 0x134 <main+0x28>
			switch(tmp_keys) {
 13e:	c2 30       	cpi	r28, 0x02	; 2
 140:	b1 f0       	breq	.+44     	; 0x16e <main+0x62>
 142:	20 f4       	brcc	.+8      	; 0x14c <main+0x40>
 144:	c1 30       	cpi	r28, 0x01	; 1
 146:	89 f0       	breq	.+34     	; 0x16a <main+0x5e>
			return;
	}
}

int main(void)
{
 148:	8c 2f       	mov	r24, r28
 14a:	f4 cf       	rjmp	.-24     	; 0x134 <main+0x28>
    {
		 // The advantage of the FPGA is that on the same IO PORT we can use outputs separate from the inputs.
		 // In this case for keyboard we use inputs 5:0, and for LED's we use outputs 2:0 of the same IO PORT, so, pins 2:0 has dual function.
		uint8_t tmp_keys = (~PINB) & 0b00011111; // Inverse the inputs from PORTB and filter them, the common for keyboard is logic 0.
		if(old_keys != tmp_keys) {
			switch(tmp_keys) {
 14c:	c4 30       	cpi	r28, 0x04	; 4
 14e:	89 f0       	breq	.+34     	; 0x172 <main+0x66>
 150:	c8 30       	cpi	r28, 0x08	; 8
 152:	d1 f7       	brne	.-12     	; 0x148 <main+0x3c>
					break;
				case 0b00000100: // BTN_DN
					PORTB = LED_B;
					break;
				case 0b00001000: // BTN_UP
					PORTB = LED_R;
 154:	15 b9       	out	0x05, r17	; 5
					delay_ms(1000);
 156:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
					PORTB = LED_G;
 15a:	05 b9       	out	0x05, r16	; 5
					delay_ms(1000);
 15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
					PORTB = LED_B;
 160:	d5 b9       	out	0x05, r29	; 5
					delay_ms(1000);
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <delay_ms.constprop.0>
					PORTB = 0;
 166:	15 b8       	out	0x05, r1	; 5
					break;
 168:	ef cf       	rjmp	.-34     	; 0x148 <main+0x3c>
		 // In this case for keyboard we use inputs 5:0, and for LED's we use outputs 2:0 of the same IO PORT, so, pins 2:0 has dual function.
		uint8_t tmp_keys = (~PINB) & 0b00011111; // Inverse the inputs from PORTB and filter them, the common for keyboard is logic 0.
		if(old_keys != tmp_keys) {
			switch(tmp_keys) {
				case 0b00000001: // BTN_OK
					PORTB = LED_R;
 16a:	15 b9       	out	0x05, r17	; 5
					break;
 16c:	ed cf       	rjmp	.-38     	; 0x148 <main+0x3c>
				case 0b00000010: // BTN_BACK
					PORTB = LED_G;
 16e:	c5 b9       	out	0x05, r28	; 5
					break;
 170:	eb cf       	rjmp	.-42     	; 0x148 <main+0x3c>
				case 0b00000100: // BTN_DN
					PORTB = LED_B;
 172:	d5 b9       	out	0x05, r29	; 5
					break;
 174:	e9 cf       	rjmp	.-46     	; 0x148 <main+0x3c>

00000176 <__vector_23>:
		}
    }
}

// Interrupt service routine.
ISR(TIMER0_OVF_vect) {
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
	tim_cnt++;
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 190:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 194:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 1aa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
